import { Component, OnInit } from '@angular/core';
import { AbstractControl, FormArray, FormBuilder, FormGroup, FormsModule, Validators } from '@angular/forms';
import { Doctor, WorkplaceType } from '../../core/Interfaces/Doctor';
import { DayOfWeek } from '../../core/Interfaces/DoctorAvailability';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { TableModule } from 'primeng/table';
import { DoctorStateService } from '../../core/services/State/doctor-state.service';
import { DialogModule } from 'primeng/dialog';
import { DynamicDialogRef } from 'primeng/dynamicdialog';

@Component({
  selector: 'app-add-doctor',
  imports: [CommonModule, FormsModule, ReactiveFormsModule, TableModule, DialogModule],
  standalone: true,
  templateUrl: './add-doctor.component.html',
  styleUrl: './add-doctor.component.css'
})
export class AddDoctorComponent implements OnInit {
  doctorForm!: FormGroup;
  workplaceTypes = Object.values(WorkplaceType);
  daysOfWeek = Object.values(DayOfWeek);
  showQualifications = false;
  showAvailabilities = false;

  constructor(private fb: FormBuilder, private doctorStateService: DoctorStateService, public ref: DynamicDialogRef) {}

  ngOnInit(): void {
    console.log('work place types', this.workplaceTypes);
    console.log('days', this.daysOfWeek);
    
    
    this.initForm();
  }
  closeDialog() {
    this.ref.close();
  }

  private initForm(): void {
    this.doctorForm = this.fb.group({
      fullName: ['', Validators.required],
      email: ['', Validators.required, , Validators.email],
      password: ['', Validators.required, , this.passwordValidator],
      specialization: [''],
      licenseNumber: [''],
      yearsOfExperience: [null, [Validators.min(0)]],
      consultationFee: [null, [Validators.min(0)]],
      workplaceType: [null, Validators.required],
      qualifications: this.fb.array([]),
      availabilities: this.fb.array([])
    });
  }

  passwordValidator(control: AbstractControl): { [key: string]: boolean } | null {
    const value: string = control.value || '';
    console.log(value);
    

    // Correct Regular Expression for Password Validation
    const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,}$/;

    if (!passwordPattern.test(value)) {
      return { passwordStrength: true }; // If the password does NOT match, return an error
    }
    return null; // If the password is valid, return null
  }

  toggleQualifications() {
    this.showQualifications = !this.showQualifications;
  }

  toggleAvailabilities() {
    this.showAvailabilities = !this.showAvailabilities;
  }

  get qualifications(): FormArray {
  return this.doctorForm.get('qualifications') as FormArray;
  }

  get availabilities(): FormArray {
    return this.doctorForm.get('availabilities') as FormArray;
  }


  addQualification(): void {
    this.qualifications.push(this.fb.group({
      qualificationName: ['', Validators.required],
      issuingInstitution: [''],
      yearEarned: [null, [Validators.required, Validators.min(1900), Validators.max(new Date().getFullYear())]]
    }));
  }

  removeQualification(index: number): void {
    this.qualifications.removeAt(index);
  }

  addAvailability(): void {
    this.availabilities.push(this.fb.group({
      dayOfWeek: [null, Validators.required],
      startTime: ['', Validators.required],
      endTime: ['', Validators.required]
    }));
  }

  removeAvailability(index: number): void {
    this.availabilities.removeAt(index);
  }

  addDoctor(): Doctor {
    const formValue = this.doctorForm.value;
  
    const newDoctor: Doctor = {
      id: '', // Assuming this will be generated by the backend
      fullName: formValue.fullName,
      email: formValue.email,
      password: formValue.password,
      yearsOfExperience: formValue.yearsOfExperience,
      specialization: formValue.specialization,
      licenseNumber: formValue.licenseNumber,
      consultationFee: formValue.consultationFee,
      workplaceType: formValue.workplaceType,
      TotalRatingScore: 0, // Default value
      TotalRatingsGiven: 0, // Default value
      qualifications: formValue.qualifications.map((q: any) => ({
        id: 0, // Backend should assign a real ID
        qualificationName: q.qualificationName,
        issuingInstitution: q.issuingInstitution,
        yearEarned: q.yearEarned,
        doctorId: '' // Will be assigned by backend
      })),
      availabilities: formValue.availabilities.map((a: any) => ({
        id: 0, // Backend should assign a real ID
        dayOfWeek: 0,
        startTime: a.startTime,
        endTime: a.endTime,
        doctorId: '' // Will be assigned by backend
      }))
    };

    return newDoctor;
  }

  submitForm(): void {
    if (this.doctorForm.valid) {
      debugger;
      var newDoctor = this.addDoctor();

      newDoctor.workplaceType = 0;
      
      console.log("created doctor", newDoctor);
      
      this.doctorStateService.addDoctor(newDoctor).subscribe({
        next: (savedDoctor) => {
          console.log('Doctor added successfully:', savedDoctor);
          // Reset the form after successful submission
          this.closeDialog();
        },
        error: (err) => {
          console.error('Error adding doctor:', err);
        }
      });
    } else {
      console.log('Form is invalid');
    }
  }
  
}
